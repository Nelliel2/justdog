import discord
from discord.ext import commands
import random
from random import choice
import time
import re
from random import randint
import json
import nltk
import requests
import string
import os
from lxml import html
from googlesearch import search
from bs4 import BeautifulSoup
import datetime
from dotenv import load_dotenv
from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer, HashingVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from pymorphy2 import MorphAnalyzer
import pickle
import asyncio


load_dotenv()
intents = discord.Intents.all()
bot = commands.Bot(command_prefix='!', intents=intents)
OKgoogle = ['—á—Ç–æ —Ç–∞–∫–æ–µ', '–æ–∫–µ–π –±–∏–Ω–ø–∞–ø']
shop = ['—Ä–µ–∫–ª–∞–º–∞']
price = ['10000']
alphabet =['. ',' ','–∞','–±','–≤','–≥','–¥','–µ','—ë','–∂','–∑','–∏','–π','–∫','–ª','–º','–Ω','–æ','–ø','—Ä','—Å','—Ç','—É','—Ñ','—Ö','—Ü','—á','—à','—â','—ä','—ã','—å','—ç','—é','—è']
coelum = ['\n','.','‡™è ','‡™¨‡´Ä ','‡™µ‡´Ä ','‡™ú‡´Ä ','‡≤é ','‡≤®‡≥ç ','·àù ','·É† ','‡¥û‡¥æ ','·É£ ','‡§è ','‡®°‡©Ä ','‡∞Ö ','‡∫Ç‡ªâ ','‡∫≤ ','‡∫û ','‡∫à‡∫ª‡ªâ ','‡ªÇ ','’Ñ ','‡¶≠‡¶ø ','‡¶è ','‡¶∞ ','·Éì ',' ·É¢ ','·Éö ','‡≤≤‡≥ç ','‡≤¶‡≥Å ','‡∫ñ ','‡∫ö‡ªç‡ªà ','‡®π‡©à ','‡®¨‡©Ä ','‡¥é ','‡§Æ‡•à‡§Ç ']

@bot.event
async def on_ready():
    print('–ë–∏–Ω–ø–∞–ø –≤ –ø–æ–ª–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ!')

@bot.listen('on_message')
async def bingpups(message):
    if message.author == bot.user or message.author.bot:
        return
    humanid = message.author.id
    human = message.author.mention
    humanauthor = message.author.mention
    msg = str(message.content).replace('\n', ' ').lower()
    msg = msg.replace(',', '')
    words = re.findall(r'\w+', msg)
    guild = bot.guilds[0]
    membs = message.author.guild.members
    people = choice(membs)
    variants = {}
    num = re.findall(r'\d+', msg)
    with open('lvl.json', 'r', encoding='utf-8') as f:
        users = json.load(f)
    with open('state.json', 'r', encoding='utf-8') as f4:
        state = json.load(f4)
    with open('BOT_CONFIG.json', 'r', encoding='utf-8') as f2:
        BOT_CONFIG = json.load(f2)
    with open('BOT_CONFIG2.json', 'r', encoding='utf-8') as f3:
        BOT_CONFIG2 = json.load(f3)
    async def update_data(users,user):
        if not user in users['users']:
            users['users'][user] = {}
            users['users'][user]['name'] = str(message.author).split('#')[0]
            users['users'][user]['exp'] = 0
            users['users'][user]['lvl'] = 1
            users['users'][user]['bing'] = 0
            users['users'][user]['money'] = 0
            users['users'][user]['angry'] = 0
            users['users'][user]['wife'] = '‚Äî'
            users['users'][user]['master'] = '‚Äî'
            users['users'][user]['servants'] = '‚Äî'
            users['users'][user]['angmsg'] = ''
            users['users'][user]['oldmsg'] = ''
            users['users'][user]['remember'] = ''
            for i in range(5):
                users['users'][user]['seconds'+str(i)] = 0
    async def add_var(users,user,var,value):
        users['users'][user][var] += value
    async def add_state(var):
        value = randint(5,10)
        if (state['bingpup'][var] + value < 100):
            state['bingpup'][var] += value
            if ((state['bingpup']['sad'] == 1) and (state['bingpup']['clean'] >= 40) and (state['bingpup']['hunger'] >= 40) and (state['bingpup']['hunger'] >= 40) and (state['bingpup']['joy'] >= 40)):
                state['bingpup']['sad'] = 0
        else:
            state['bingpup'][var] = 100
    async def subtract_state():
        if (time.time() - state['bingpup']['time'] > 21600):
            state['bingpup']['time'] = round(time.time(),2)
            state['bingpup']['clean'] -= randint(3,10)
            state['bingpup']['hunger'] -= randint(3,10)
            state['bingpup']['healf'] -= randint(3,10)
            state['bingpup']['joy'] -= randint(3,10)
            if ((state['bingpup']['sad'] == 0) and ((state['bingpup']['clean'] <= 40) or (state['bingpup']['hunger'] <= 40) or (state['bingpup']['hunger'] <= 40) or (state['bingpup']['joy'] <= 40))):
                state['bingpup']['sad'] = 1
    async def equate_var(users,user,var,value):
         users['users'][user][var] = value
    async def add_lvl(users,user):
        if users['users'][user]['exp'] > users['users'][user]['lvl']*users['users'][user]['lvl']:
            #await message.channel.send(f'{message.author.mention} –ø–æ–≤—ã—Å–∏–ª —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å!')
            users['users'][user]['exp'] = 0
            users['users'][user]['lvl'] = users['users'][user]['lvl'] + 1
    async def on_ping(message):
        if message.mention_everyone:
            return
        elif '<@!707538636580716554>' in message.content:
            if users['users'][str(message.author.id)]['angry'] < 3:
                ment = ['–î–∞, —ç—Ç–æ —è!', '> –ë–∏–Ω–ø–∞–ø, —á—Ç–æ —Ç—ã —É–º–µ–µ—à—å?', '–ë–∏–Ω–ø–∞–ø –ª—É—á—à–∏–π –Ω–∞ —Å–≤–µ—Ç–µ –ø–µ—Å!', '–ì–∞–≤~']
                await message.channel.send(random.choice(ment)) 
                await message.channel.send('<:bingpup_6:716960326389727253>')
            else:
                ment1 = ['<:bingpup_5:710240672707248238>', '<:bingpup_6:751028614681722920>']
                await message.channel.send(random.choice(ment1))
    async def top(comparator,who,measure):
        top = {}
        count = 1
        for user in users['users']:
            top[user] = [users['users'][user]['name'], users['users'][user][comparator]]
        top = sorted(top.items(), key=lambda x: x[1], reverse=True) 
        top = dict(top)
        answer = ''
        for user in top:
            human = top[user][0]
            answer += f'{count}. {human} ‚Äî {top[user][1]} {measure}\n'
            count += 1
            if count == 11:
                break
        embed = discord.Embed(description=answer, color=0xff0000, title=f'–õ—É—á—à–∏–µ {who} –ë–∏–Ω–ø–∞–ø–∞ üåà', )
        embed.set_footer(text='–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥!', icon_url=message.author.avatar_url) 
        embed.set_image(url='https://cdn.discordapp.com/attachments/616315208251605005/616319462349602816/Tw.gif')
        top.clear()    
        await message.channel.send(embed=embed)         
    def chatbot_query(query, index=0):
        fallback = '–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –∑–Ω–∞—é'
        result = ''

        try:
            search_result_list = list(search(query, tld='co.in', lang='rus', num=10, stop=3, pause=1, country='Russia'))

            page = requests.get(search_result_list[index])

            tree = html.fromstring(page.content)

            soup = BeautifulSoup(page.content, features='lxml')

            article_text = ''
            article = soup.findAll('p')
            for element in article:
                article_text += '\n' + ''.join(element.findAll(text = True))  
            bracket  = 0
            first_sentence = ''
            article_text = article_text.replace('\n', ' ')
            article_text = article_text.replace(' –º–Ω.', ' –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ')
            article_text = article_text.replace(' –µ–¥.', ' –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ')
            article_text = article_text.replace(' —á.', ' —á–∏—Å–ª–æ')
            article_text = article_text.replace(' –º.', ' –º—É–∂—Å–∫–æ–π')
            article_text = article_text.replace(' –∂.', ' –∂–µ–Ω—Å–∫–∏–π')
            article_text = article_text.replace(' —Ä.', ' —Ä–æ–¥')
            article_text = article_text.replace('...', '')
            article_text = article_text.replace(' . ', ' ')
            article_text = article_text.replace('‚Ä¢', ' ')
            article_text = article_text.replace('1.', '–í–æ-–ø–µ—Ä–≤—ã—Ö,')
            article_text = article_text.replace('2.', '–í–æ-–≤—Ç–æ—Ä—ã—Ö,')
            article_text = article_text.replace('3.', '–í-—Ç—Ä–µ—Ç—å–∏—Ö,')
            for char in article_text:
                if (char == '(') or (char == '['):
                    bracket = 1
                elif  (char == ')') or (char == ']'):
                    bracket  = 0
                elif char == '.' and bracket == 0:
                    breakout = 1
                    break
                first_sentence = first_sentence + str(char)
            first_sentence = first_sentence.replace('[1]', '')
            first_sentence = first_sentence.replace('[2]', '')
            first_sentence = first_sentence.replace('[3]', '')
            first_sentence = first_sentence.replace('  ', ' ')
            chars_without_whitespace = first_sentence.translate(
                { ord(c): None for c in string.whitespace }
        )

            if len(chars_without_whitespace) > 0:
                result = first_sentence
            else:
                result = fallback
            return result
        except:
            if len(result) == 0: result = fallback
            return result
    def clean(text):
        cleaned_text = ''
        text = text.replace('—ë','–µ') 
        for char in text.lower():
            if char in '–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è ':
                cleaned_text += char #cleaned_text = cleaned_text + char
        return cleaned_text
    def get_intent(msg):   
        """
        with open('our_ml_model.pickle', 'rb') as f0:
            loaded_classifier = pickle.load(f0)
        with open('our_vectorizer.pickle', 'rb') as f0:
            loaded_vectorizer = pickle.load(f0)
        intent = loaded_classifier.predict(loaded_vectorizer.transform([clean(msg)]))[0]
        """
        words2 = re.findall(r'\w+', msg) 
        for intent in BOT_CONFIG['intents'].keys():
            for example in BOT_CONFIG['intents'][intent]['examples']:
                text1 = clean(example)
                words1 = re.findall(r'\w+', text1) 
                text2 = words2[0]
                for i in range(1,len(words1) if len(words1) <= len(words2) else len(words2)):
                    text2 += " " + words2[i]
                distance = nltk.edit_distance(text1, text2) / max(len(text1), len(text2))
                if distance < 0.4: 
                    if ((intent in variants) and (variants[intent] > distance)) or (intent not in variants):
                        variants[intent] = distance         
        intent = min(variants, key=variants.get, default='–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–Ω—Ç–µ–Ω—Ç')
        print(variants)
        print(msg + ' - —ç—Ç–æ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ ' + min(variants, key=variants.get, default='–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–Ω—Ç–µ–Ω—Ç'))
        variants.clear()
        
        return intent
    def get_intent2(msg):
        for intent in BOT_CONFIG2['intents'].keys():
            for example in BOT_CONFIG2['intents'][intent]['examples']:
                text1 = clean(example)
                text2 = clean(msg)
                distance = nltk.edit_distance(text1, text2) / max(len(text1), len(text2))
                if distance < 0.4: 
                    if ((intent in variants) and (variants[intent] > distance)) or (intent not in variants):
                        variants[intent] = distance         
        intent = min(variants, key=variants.get, default='–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–Ω—Ç–µ–Ω—Ç')
        variants.clear()
        return intent
    def botic(msg):
        intent = get_intent(msg)
        if intent == '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–Ω—Ç–µ–Ω—Ç':
            intent = 'yes?'
        return intent
    def humanchange(humanid, msg):
        if ('@' in msg):
            humanid = ''
            if ('!' in msg):
                for i in range(msg.find('!') + 1, len(msg)):
                    if msg[i] == '>':
                        break
                    humanid += msg[i]
            else:
                for i in range(msg.find('@') + 1, len(msg)):
                    if msg[i] == '>':
                        break
                    humanid += msg[i]
            print(humanid)
        return humanid
    def edit(answer, humanauthor, human, msg, people, angmsg):
        if ('@' in msg):
            human = '<'
            for i in range(msg.find('@'), len(msg)):
                human = human + msg[i]
                if msg[i] == '>':
                    break
        if ('$' in answer):
            m = clean(msg)
            if angmsg != '2':
                for word in BOT_CONFIG['intents'][intent]['examples']:
                    m = m.replace(word, '')
            else:
                for word in BOT_CONFIG2['intents'][intent]['examples']:
                    m = m.replace(word, '')
            replace_values = {' —è ': '—Ç—ã ', '–±–∏–Ω–ø–∞–ø': '—è', '—Ç–µ–±–µ': '–ë–∏–Ω–ø–∞–ø—É', '–º–Ω–µ': '—Ç–µ–±–µ', '—Ç–≤–æ–π': '–ë–∏–Ω–ø–∞–ø–∞', '–º–æ–π': '—Ç–≤–æ–π', '—ç–π ': ''}
            for i, j in replace_values.items(): 
                m = m.replace(i, str(j))
            offset = datetime.timedelta(hours=3)
            tz = datetime.timezone(offset, name='–ú–°–ö')
            now = datetime.datetime.now(tz=tz)
            replace_values = {'$mentioned[1, yes]': human, '$authorID': humanauthor, '$randomUser': people, '$message': m, '$angry': angmsg, '$username': people, '$random[0, 24]': randint(0,23), '$random[0, 60]': randint(0,60), '$random[0, 100]': randint(0,100), '$data': now.strftime('%d-%m-%Y %H:%M:%S')}
            for i, j in replace_values.items(): 
                answer = answer.replace(i, str(j))
        return answer 
    async def sell(msg):
        if any(word in msg for word in shop):
            for i in range (0,len(shop)):
                if shop[i] in msg:
                    if int(price[i]) <= int(users['users'][str(humanid)]['money']):
                        if '—Ä–µ–∫–ª–∞–º' in msg:
                            state['bingpup']['ad'] = msg.replace('–∫—É–ø–∏—Ç—å —Ä–µ–∫–ª–∞–º–∞ ', '')
                        await add_var(users,str(message.author.id),'money',-int(price[i]))
                        await message.add_reaction('‚úÖ')
                        break
                    else:
                        await message.channel.send('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')
                        break

    await update_data(users,str(message.author.id))      
    await subtract_state()
    await on_ping(message)
    if ('–≥–¥–µ –¥–µ–Ω—å–≥–∏' in msg):
        if (time.time() - users['users'][str(message.author.id)]['seconds0'] > 180):
            await add_var(users,str(message.author.id),'seconds0',round(time.time(),2)) 
            intent = 'money'
            answer = edit(random.choice(BOT_CONFIG2['intents']['money']['responses']), humanauthor, human, msg, people, '')
            embed = discord.Embed(description=answer, color=0xff0000)
            url=random.choice(BOT_CONFIG2['intents']['money']['responses2'])
            embed.set_image(url=url)
            sendmessage = await message.channel.send(embed=embed)
            await asyncio.sleep(10)

            money = randint(500,1000)
            embed = discord.Embed(description=f'{humanauthor} –ø–æ–ª—É—á–∞–µ—Ç {money} üíµ', color=0xff0000)
            
            embed.set_image(url=url)
            await sendmessage.edit(embed=embed)
            await add_var(users,str(message.author.id),'money',money)
        else:
            await message.channel.send('‚ùå –î–µ–Ω–µ–≥ –±–æ–ª—å—à–µ –Ω–µ—Ç. –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ 3 –º–∏–Ω—É—Ç—ã')
    elif ('–∑–∞–≥–∞–¥–∞—Ç—å –∂–µ–ª–∞–Ω–∏–µ' in msg):  
        if len(words) > 2:
            await equate_var(users,str(message.author.id),'wish',msg.replace('–∑–∞–≥–∞–¥–∞—Ç—å –∂–µ–ª–∞–Ω–∏–µ ',''))
            embed = discord.Embed(description=f'üêæ –¢–µ–ø–µ—Ä—å –∫–∏–Ω—å—Ç–µ –¥–µ–Ω–µ–∂–∫—É –≤ –∫–æ–ª–æ–¥–µ—Ü ‚õ≤', color=0xff0000)
        else:
            embed = discord.Embed(description=f'‚ùå –°–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∂–µ–ª–∞–Ω–∏–µ', color=0xff0000)
        await message.channel.send(embed=embed)
    elif ('–≤ –∫–æ–ª–æ–¥–µ—Ü' in msg):  
        if len(words) >= 3 and words[3].isdigit():
            if int(words[3]) >= 100 and int(words[3]) <= users['users'][str(message.author.id)]['money']:
                embed = discord.Embed(description=f'üåà **{human}, –≤–∞—à–µ –∂–µ–ª–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª–Ω–∏—Ç—Å—è!** ‚ú®\n‚òÖ‚ÄôÔæüÔΩ•::ÔΩ•ÔΩ°'+users['users'][str(message.author.id)]['wish'] +'ÔΩ°ÔΩ•::ÔΩ•Ôæü‚Äô‚òÜ', color=0xff0000)
                await add_var(users,str(message.author.id),'money',-int(words[3]))
            else:
                embed = discord.Embed(description=f'‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∂–µ–ª–∞–Ω–∏—è 100 üíµ', color=0xff0000)
        else:
            embed = discord.Embed(description=f'‚ùå –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è', color=0xff0000)
        await message.channel.send(embed=embed)
    elif ('–±–∞–ª–∞–Ω—Å' in words[0]):
            humanid = str(humanchange(humanid, msg))
            human = '<@' + humanid + '>'
            money = users['users'][humanid]['money']
            embed = discord.Embed(description=f'–ë–∞–ª–∞–Ω—Å {human}: {money} üíµ', color=0xff0000)
            await message.channel.send(embed=embed)
    elif ('–ø–µ—Ä–µ–≤–µ—Å—Ç–∏' in words[0]):  
            humanid = str(humanchange(humanid, msg))
            human = '<@' + humanid + '>'
            humanauthorid = str(message.author.id)
            if humanauthor != human:
                if int(num[0]) <= int(users['users'][humanauthorid]['money']):
                    if int(num[0]) >= 0:
                        users['users'][humanid]['money'] = int(num[0]) + int(users['users'][humanid]['money'])
                        users['users'][humanauthorid]['money'] = int(users['users'][humanauthorid]['money']) - int(num[0])
                        embed = discord.Embed(description=f'{int(num[0])} üí∏ {human}', color=0xff0000, title='–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ')
                    else:
                        embed = discord.Embed(description=f'‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ 1 üíµ', color=0xff0000)
                else:
                    embed = discord.Embed(description=f'‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', color=0xff0000)
            else:
                embed = discord.Embed(description=f'üí∏ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –¥–µ–Ω—å–≥–∏ —Å–∞–º–æ–º—É —Å–µ–±–µ', color=0xff0000)
            await message.channel.send(embed=embed)    
    elif ('–ø—Ä–æ—Ñ–∏–ª—å' in words[0]):
        humanid = str(humanchange(humanid, msg))
        human = '<@' + humanid + '>'
        description = f'–ù–∏–∫: {human} ('+message.author.name+')\n–ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω: '+str(message.author.created_at)[:10]+'\n–ñ–µ–Ω–∞: '+users['users'][humanid]['wife']+'\n–•–æ–∑—è–∏–Ω: '+users['users'][humanid]['master']+'\n–°–ª—É–≥–∏: '+users['users'][humanid]['servants']+'\n–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n'+str(users['users'][humanid]['lvl'])+' üèÜ '+str(users['users'][humanid]['exp'])+' ‚è≥ '+str(users['users'][humanid]['money'])+' üíµ '+str(users['users'][humanid]['bing'])+' üê∂\n–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:\n*–ø—É—Å—Ç–æ~*'
        embed = discord.Embed(title='–ë–∏–Ω–ø—Ä–æ—Ñ–∏–ª—å üåà', description=description, color=message.author.color)
        ad = state['bingpup']['ad']
        embed.set_thumbnail(url=message.author.avatar_url) 
        embed.set_footer(text=f'üíµ –†–µ–∫–ª–∞–º–∞: "{ad}" üíµ!') 
        embed.set_image(url='https://cdn.discordapp.com/attachments/616315208251605005/616319462349602816/Tw.gif')
        await message.channel.send(embed=embed)
    elif ('–º–∞–≥–∞–∑–∏–Ω' in words[0]):    
        embed = discord.Embed(title='–ú–∞–≥–∞–∑–∏–Ω :convenience_store:', description= f':frame_photo: {shop[0]} (–≤ –ø—Ä–æ—Ñ–∏–ª–µ) ‚Äî {price[0]} :dollar:', color=0xff0000)
        embed.set_footer(text='–ù–∞–ø–∏—à–∏—Ç–µ: "–ö—É–ø–∏—Ç—å..."', icon_url=message.author.avatar_url)
        await message.channel.send(embed=embed)
        await message.author.profile
    elif ('–∫—É–ø–∏—Ç—å' in words[0]):   
        await sell(msg)
    elif ('—Å–æ—Å—Ç–æ—è–Ω–∏–µ' in words[0] or '–±–∏–Ω–ø–∞–ø —Å–æ—Å—Ç–æ—è–Ω–∏–µ' in msg):
        embed = discord.Embed(description=f'‚ù§Ô∏è - ' + str(state['bingpup']['joy']) + '%  üöø - ' + str(state['bingpup']['clean']) + '%  üíä - ' + str(state['bingpup']['healf']) + '%  üçñ - ' + str(state['bingpup']['hunger']) + '%', color=0xff0000)
        embed.set_image(url='https://cdn.discordapp.com/attachments/616315208251605005/616319462349602816/Tw.gif')
        await message.channel.send(embed=embed)
    elif ('–∑–∞–±–æ—Ç–∞' in words[0]):
        embed = discord.Embed(description='‚ù§Ô∏è **–†–∞–¥–æ—Å—Ç—å**\n–û–±–Ω–∏–º–∏—Ç–µ—Å—å —Å –ë–∏–Ω–ø–∞–ø–æ–º, —Å–∫–∞–∂–∏—Ç–µ –µ–º—É –∫–∞–∫–æ–π –æ–Ω —Ö–æ—Ä–æ—à–∏–π, –ø–æ–∏–≥—Ä–∞–π—Ç–µ —Å –Ω–∏–º –≤ "–ë–∏–Ω–±–æ–Ω" –∏ –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç–µ –µ–≥–æ –∑–∞ —Ä–∞–±–æ—Ç—É\n\nüöø **–ß–∏—Å—Ç–æ—Ç–∞**\n–í—ã–º–æ–π—Ç–µ –ë–∏–Ω–ø–∞–ø—É –ª–∞–ø–∫–∏, –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ –ø—Ä–∏–Ω—è—Ç—å –≤–∞–Ω–Ω—É –∏ –ø–æ—á–∏—Å—Ç–∏—Ç—å –∑—É–±–∫–∏\n\nüíä **–ó–¥–æ—Ä–æ–≤—å–µ**\n–ó–∞—Å—Ç–∞–≤—å—Ç–µ –ë–∏–Ω–ø–∞–ø–∞ –±–µ–≥–∞—Ç—å, –∫—É—à–∞—Ç—å –≤–∏—Ç–∞–º–∏–Ω—ã, —Å–∏–¥–µ—Ç—å –≤ —Ç–µ–ø–ª–µ –∏ –ø–æ–±–æ–ª—å—à–µ –æ—Ç–¥—ã—Ö–∞—Ç—å\n\nüçñ **–°—ã—Ç–æ—Å—Ç—å**\n–ü–æ–∫–æ—Ä–º–∏—Ç–µ –ë–∏–Ω–ø–∞–ø–∞\n\n‚Ä¢ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äî —Ç–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ë–∏–Ω–ø–∞–ø–∞', title='–ö–∞–∫ –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ –ë–∏–Ω–ø–∞–ø–µ', color=0xff0000)
        embed.set_image(url='https://cdn.discordapp.com/attachments/616315208251605005/616319462349602816/Tw.gif')
        await message.channel.send(embed=embed)  
    elif ('—Ç–∞–π–º–µ—Ä' in words[0]):
        if len(words) == 3 and words[1].isdigit():
            if '—á' in msg:
                tm = int(words[1])*60*60
            elif '–º' in msg:
                tm = int(words[1])*60
            else:
                tm = int(words[1])
            print('—Ç–∞–π–º–µ—Ä –Ω–∞ ' + str(tm))
            await message.add_reaction('‚úÖ')
            await asyncio.sleep(tm)
            embed = discord.Embed(description=f'–í—Ä–µ–º—è –≤—ã—à–ª–æ! ' + str(random.choice(['–ì–∞–≤!','–¢—è—Ñ!','–ì–∞–≤-–≥–∞–≤"','–í—É—Ñ!','–ê—Ñ—Ñ.'])) + f'\n–í—ã –ø—Ä–æ—Å–∏–ª–∏ –Ω–∞–ø–æ–º–Ω–∏—Ç—å:\n*'+ users['users'][str(message.author.id)]['remember'] +'*', title='–ë–∏–Ω—Ç–∞–π–º–µ—Ä', color=0xff0000)
            embed.set_image(url='https://cdn.discordapp.com/attachments/616315208251605005/616319462349602816/Tw.gif')
            await message.channel.send(humanauthor, embed=embed)    
        else:
            embed = discord.Embed(description=f'‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –∏ –µ–¥–∏–Ω–∏—Ü—É –≤—Ä–µ–º–µ–Ω–∏', color=0xff0000)
            await message.channel.send(embed=embed)     
    elif (('—á–µ—Ç' in words[0]) or ('–Ω–µ—á–µ—Ç' in words[0])):
        if "—á–µ—Ç " in msg:
            if len(words) == 2 and words[1].isdigit():
                if int(words[1]) <= users['users'][str(message.author.id)]['money']:
                    if int(words[1]) >= 0:
                        cube1 = str(randint(0,5))
                        —Åube2 = str(randint(0,5))
                        print(cube1 + —Åube2)
                        result = '—á–µ—Ç' if ((int(cube1)+int(—Åube2)) % 2) == 0 else '–Ω–µ—á–µ—Ç'
                        cube1 = BOT_CONFIG['intents']['roll']['responses'][int(cube1)-1]
                        —Åube2 = BOT_CONFIG['intents']['roll']['responses'][int(—Åube2)-1]
                        await message.channel.send(cube1 + —Åube2)
                        await message.channel.send(random.choice(['<:emoji_21:739609346610298931>', '<:bingpup_12:902268416952512552>', '<:bingbon:902268449168965632>']))
                        if result == words[0]:
                            users['users'][str(humanid)]['money'] += int(words[1])
                            embed = discord.Embed(description=f'**{result.capitalize()}.** {human} –ø–æ–ª—É—á–∞–µ—Ç {int(words[1])} üíµ', color=0xff0000)
                        else:
                            users['users'][str(humanid)]['money'] -= int(words[1])
                            embed = discord.Embed(description=f'**{result.capitalize()}.** {human} —Ç–µ—Ä—è–µ—Ç {int(words[1])} üí∏', color=0xff0000)
                    else:
                        embed = discord.Embed(description=f'‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 1 üíµ', color=0xff0000)
                else:
                    embed = discord.Embed(description=f'‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', color=0xff0000)
            else:
                    embed = discord.Embed(description=f'‚ùå –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞?', color=0xff0000)
            await message.channel.send(embed=embed)
            await add_state('joy')
    elif ('–ª—É—á—à–∏–µ' in words[0]):
        if '–¥—Ä—É–∑—å—è' in words[1]:
            await top('lvl', '–¥—Ä—É–∑—å—è', '—É—Ä.')
        elif '–±–∞–Ω–∫–∏—Ä—ã' in words[1]:
            await top('money', '–±–∞–Ω–∫–∏—Ä—ã', 'üíµ')
        elif '–±–∏–Ω–ø–∞–ø—ã' in words[1]:
            await top('bing', '–±–∏–Ω–ø–∞–ø—ã', 'üê∂')
    elif ('–±–∏–Ω–±–æ–Ω' in words[0]):    
        await message.channel.send("–ë–∏–Ω–±–æ–Ω–∞ –±–æ–ª—å—à–µ –Ω–µ—Ç! –ì–æ–≤–æ—Ä–∏ —Å—Ä–∞–∑—É —á–µ—Ç/–Ω–µ—á–µ—Ç!")
    elif ('—Å –∫–æ—ç–ª—É–º' in msg):
        answer = str(message.content).replace('—Å –∫–æ—ç–ª—É–º ','') + ' '
        for i in range(len(alphabet)):
            answer = answer.replace(coelum[i],alphabet[i])
        await message.channel.send(answer)
    elif ('–Ω–∞ –∫–æ—ç–ª—É–º' in msg):
        answer = str(message.content).lower().replace('–Ω–∞ –∫–æ—ç–ª—É–º ','')
        for i in range(len(alphabet)):
            answer = answer.replace(alphabet[i],coelum[i])
        await message.channel.send(answer)
    elif ('–±–∏–Ω–ø–∞–ø —á—Ç–æ —Ç—ã —É–º–µ–µ—à—å' in msg or '–±–∏–Ω–ø–∞–ø help' in msg or '—á—Ç–æ —É–º–µ–µ—Ç –±–∏–Ω–ø–∞–ø' in msg):
        description = ':pencil: **–ó–Ω–∞—é –∫–æ–º–∞–Ω–¥—ã** :pencil:\n‚Ä¢ —Ç–∞–ø–∫–∏/–Ω–æ—Å–æ–∫\n‚Ä¢ —Ñ–∞—Å/—Ñ—É\n‚Ä¢ –ª–µ–∂–∞—Ç—å/—Å—Ç–æ—è—Ç—å/–±–µ–∂–∞—Ç—å/—Å–ª—É–∂–∏—Ç—å/–¥–æ–º–æ–π\n‚Ä¢ –¥–∞–π –ª–∞–ø—É\n‚Ä¢ —É–º—Ä–∏\n‚Ä¢ –≥–æ–ª–æ—Å\n‚Ä¢ –µ—à—å/–∫—É—Å–∞–π\n‚Ä¢ —Å–∫–∞–∂–∏ [—Ç–µ–∫—Å—Ç]\n‚Ä¢ –Ω–∞–π–¥–∏ [–≤–µ—â—å]\n‚Ä¢ –ø—Ä–∏–Ω–µ—Å–∏ [–≤–µ—â—å]\n‚Ä¢ –ª–æ–≤–∏ [–≤–µ—â—å]\n‚Ä¢ –æ–±–Ω–∏–º–∏/—Å–æ–≥—Ä–µ–π\n‚Ä¢ –≤ –±–æ–π\n‚Ä¢ –∫ —Ä—É–∫–µ/–∫ –Ω–æ–≥–µ\n‚Ä¢ —Å–ø–∞—Ç—å\n‚Ä¢ –∑–∞–≤–∞—Ä–∏ —á–∞–π\n‚Ä¢ –¥–∞–π –ø–µ–Ω–¥–∞–ª—å\n‚Ä¢ –ø–æ—Ö–≤–∞–ª–∏\n‚Ä¢ –≥—É–ª—è—Ç—å\n*–∏ –¥—Ä—É–≥–æ–µ...*\n\n'
        description += ':crystal_ball: **–ü–æ–¥—Å–∫–∞–∂—É** :crystal_ball:\n‚Ä¢ —Å –∫–æ—ç–ª—É–º/–Ω–∞ –∫–æ—ç–ª—É–º [—Ç–µ–∫—Å—Ç]\n‚Ä¢ [—á—Ç–æ-—Ç–æ] –∏–ª–∏ [—á—Ç–æ-—Ç–æ]\n‚Ä¢ –∫–æ–≥–æ —Å—ä–µ–¥—è—Ç –∏—Ä–∏—Å—ã\n‚Ä¢ –∑–∞—á–µ–º/–ø–æ—á–µ–º—É \n‚Ä¢ –≥–¥–µ/–∫—É–¥–∞\n‚Ä¢ –∫–æ–≥–¥–∞\n‚Ä¢ –∫—Ç–æ\n‚Ä¢ —á—å—ë\n‚Ä¢ –Ω–∞–ø–æ–º–Ω–∏\n‚Ä¢ —Å–∫–æ–ª—å–∫–æ\n‚Ä¢ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å\n‚Ä¢ –≤–æ–∑—Ä–∞—Å—Ç\n‚Ä¢ —Ü–≤–µ—Ç\n‚Ä¢ –¥–∞—Ç–∞ —Å–µ–≥–æ–¥–Ω—è\n‚Ä¢—á—Ç–æ —Ç–∞–∫–æ–µ [—Å–ª–æ–≤–æ]/–æ–∫–µ–π –±–∏–Ω–ø–∞–ø [–≤–æ–ø—Ä–æ—Å]\n\n'
        description += ':game_die: **–ü–æ–∏–≥—Ä–∞—é** :game_die:\n‚Ä¢ –±—Ä–æ—Å—å –∫—É–±–∏–∫\n‚Ä¢ —Ä–∞–Ω–¥–æ–º [–¥–æ]/—Ä–∞–Ω–¥–æ–º [–æ—Ç] [–¥–æ]\n‚Ä¢ –±—É–∫–≤–∞\n‚Ä¢ —É–¥–∞—Ä\n‚Ä¢ –∑–∞–±–æ—Ç–∞\n‚Ä¢ —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n\n'
        description += ':bank: **–î–µ–Ω—å–≥–∏** :bank:\n*–î–ª—è —ç—Ç–∏—Ö –∫–æ–º–∞–Ω–¥ –Ω–µ –Ω—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å "–ë–∏–Ω–ø–∞–ø, "*\n‚Ä¢ –≥–¥–µ –¥–µ–Ω—å–≥–∏\n‚Ä¢ –±–∞–ª–∞–Ω—Å\n‚Ä¢ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ [—Å—É–º–º–∞] [—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ]\n‚Ä¢ –∑–∞–≥–∞–¥–∞—Ç—å –∂–µ–ª–∞–Ω–∏–µ/–±—Ä–æ—Å–∏—Ç—å –≤ –∫–æ–ª–æ–¥–µ—Ü\n‚Ä¢ —á–µ—Ç/–Ω–µ—á–µ—Ç [—Å—Ç–∞–≤–∫–∞]\n‚Ä¢ –ª—É—á—à–∏–µ [–¥—Ä—É–∑—å—è/–±–∏–Ω–ø–∞–ø—ã/–±–∞–Ω–∫–∏—Ä—ã]\n‚Ä¢ –ø—Ä–æ—Ñ–∏–ª—å\n‚Ä¢ –º–∞–≥–∞–∑–∏–Ω'
        embed = discord.Embed(title='–ü—Ä–∏–≤–µ—Ç! –Ø –ë–∏–Ω–ø–∞–ø', description=description, color=0xff0000)
        embed.set_thumbnail(url='https://images-ext-2.discordapp.net/external/Yx_PDy7yLOK3dIobeHhXUps6d9bBoZY4CJGJ0HlPzhw/https/pbs.twimg.com/media/EQJz34LU8AEiKfU.jpg') 
        embed.set_footer(text=f'–ß—Ç–æ–±—ã –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫–æ –º–Ω–µ, –ø–∏—à–∏ "–ë–∏–Ω–ø–∞–ø, "', icon_url=message.author.avatar_url) 
        await message.channel.send(embed=embed)
    elif ('–æ–±—É—á–∏—Å—å' in msg):
        X, y = [], []
        for intent in BOT_CONFIG['intents']:
            for example in BOT_CONFIG['intents'][intent]['examples']:
                X.append(example)
                y.append(intent)
        """
        morph = MorphAnalyzer()
        def lemmatize(text):
            lemmatized_text = []
            for word in text.lower().split():
                lemmatized_text.append(morph.parse(word)[0].normal_form)
            return ' '.join(lemmatized_text)
        X_train = [lemmatize(text) for text in X_train]
        X_test = [lemmatize(text) for text in X_test]
        """
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25)
        vectorizer = CountVectorizer(analyzer='word', ngram_range=(1,3))
        vectorizer.fit(X_train)
        X_vectors = vectorizer.transform(X_train)
        classifier = LogisticRegression(max_iter=200)
        classifier.fit(X_vectors, y_train)
        print(classifier.score(X_vectors, y_train))
        print(classifier.score(vectorizer.transform(X_test), y_test))
        with open('our_ml_model.pickle', 'wb') as f0:
            pickle.dump(classifier, f0)
        with open('our_vectorizer.pickle', 'wb') as f0:
            pickle.dump(vectorizer, f0)
    else:
        saybing = '–±–∏–Ω–ø–∞–ø' if '–±–∏–Ω–ø–∞–ø' in msg else '–Ω–µ—Ç –±–∏–Ω–ø–∞–ø–∞' #–£–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –ë–∏–Ω–ø–∞–ø?
        msg = clean(msg)
        parasite = ['–±–∏–Ω–ø–∞–ø', '—ç–π ', ' –∏ ', ' –≤ ', '–∫–∞–∫ –±—ã', '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ –≥–æ–≤–æ—Ä—è—Ç', '–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º', '–±—É–∫–≤–∞–ª—å–Ω–æ', '–ø—Ä—è–º–æ', '–∫–∞–∫ –≥–æ–≤–æ—Ä–∏—Ç—Å—è', '—Ç–∞–∫ –¥–∞–ª–µ–µ', '—Å–∫–∞–∂–µ–º', '–≤–µ–¥—å', '–∫–∞–∫ –µ–≥–æ', '–≤ –Ω–∞—Ç—É—Ä–µ', '—Ç–∞–∫ –≤–æ—Ç', '–∫–æ—Ä–æ—á–µ', '–∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å', '–≤–∏–¥–∏—à—å', '—Å–ª—ã—à–∏—à—å', '—Ç–∏–ø–∞', '–Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ', '–≤–æ–æ–±—â–µ', '–≤ –æ–±—â–µ–º-—Ç–æ', '–≤ –æ–±—â–µ–º', '–≤ –Ω–µ–∫–æ—Ç–æ—Ä–æ–º —Ä–æ–¥–µ', '–Ω–∞ —Ñ–∏–≥', '–Ω–∞ —Ö—Ä–µ–Ω', '–≤ –ø—Ä–∏–Ω—Ü–∏–ø–µ', '–∏—Ç–∞–∫', '—Ç–∏–ø–∞ —Ç–æ–≥–æ', '—Ç–æ–ª—å–∫–æ', '–≤–æ—Ç', '–≤ —Å–∞–º–æ–º –¥–µ–ª–µ', '–¥–∞–Ω–µ—Ç', '–≤—Å–µ —Ç–∞–∫–æ–µ', '–≤ —Ü–µ–ª–æ–º', '—Ç–æ –µ—Å—Ç—å', '—ç—Ç–æ', '—ç—Ç–æ —Å–∞–º–æ', '–µ–µ—à–∫–∏–Ω –∫–æ—Ç', '–Ω—É', '–Ω—É –≤–æ—Ç', '–Ω—É —ç—Ç–æ', '–ø—Ä–∏–∫–∏–Ω—å', '–ø—Ä–∏–∫–æ–ª', '–∑–Ω–∞—á–∏—Ç', '—Ç–∞–∫ —Å–∫–∞–∑–∞—Ç—å', '–ø–æ–Ω–∏–º–∞–µ—à—å', '–¥–æ–ø—É—Å—Ç–∏–º', '—Å–ª—É—à–∞–π', '–Ω–∞–ø—Ä–∏–º–µ—Ä', '–ø—Ä–æ—Å—Ç–æ', '–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ', '–¥–∞ –ª–∞–¥–Ω–æ', '–±–ª–∏–Ω', '–ø–æ—Ö–æ–¥—É', '–∞-–∞-–∞', '—ç-—ç-—ç', '–Ω–µ –≤–æ–ø—Ä–æ—Å', '–±–µ–∑ –ø—Ä–æ–±–ª–µ–º', '–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏', '—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏', '–∫–∞–∫-—Ç–æ —Ç–∞–∫', '–Ω–∏—á–µ–≥–æ —Å–µ–±–µ','–ø–æ–∂–∞–ª—É–π—Å—Ç–∞']
        for i in range(len(parasite)):
            msg = msg.replace(parasite[i],'') 
        words = re.findall(r'\w+', msg)
        intent = get_intent2(msg)
        if intent != '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–Ω—Ç–µ–Ω—Ç':
            if ('—É—Ç—Ä–∞' in msg):
                return
            answer = random.choice(BOT_CONFIG2['intents'][intent]['responses'])
            if intent == 'random': #—Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ
                if len(num) == 2:
                    answer += str(randint(int(num[0]), int(num[1])))
                elif len(num) == 1:
                    answer += str(randint(0, int(num[0])))
                else:
                    answer = '‚ùå –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ'
            if BOT_CONFIG2['intents'][intent]['double'] == 'embed':
                embed = discord.Embed(description=edit(answer, humanauthor, human, msg, people, '2'), color=0xff0000, title=BOT_CONFIG2['intents'][intent]['title'])
                embed.set_image(url='https://cdn.discordapp.com/attachments/616315208251605005/616319462349602816/Tw.gif')
                await message.channel.send(embed=embed)  
            else:
                await message.channel.send(edit(answer, humanauthor, human, msg, people, '2'))
                if BOT_CONFIG2['intents'][intent]['double'] == ('reactions' or 'reactions&responses2'):
                    await message.add_reaction(random.choice(BOT_CONFIG2['intents'][intent]['reactions']))
                elif BOT_CONFIG2['intents'][intent]['double'] == ('responses2' or 'reactions&responses2'):
                    answer = random.choice(BOT_CONFIG2['intents'][intent]['responses2'])
                    await message.channel.send(edit(answer, humanauthor, human, msg, people, '2'))          

        elif any(word in msg for word in OKgoogle):
            for word in OKgoogle:
                msg = msg.replace(word, '')
            await message.channel.send(chatbot_query(msg))


        elif saybing == '–±–∏–Ω–ø–∞–ø': 
            await add_lvl(users,str(message.author.id))
            if '–∏–ª–∏' in msg:
                words = re.findall(r'\w+', msg)
                answer = words[0]
                i = 1
                while '–∏–ª–∏' != words[i]:
                    answer += " " + words[i]
                    i += 1   
                await message.channel.send(random.choice([answer, msg.replace(answer + ' –∏–ª–∏ ', '', 1), f'*—Å–æ–≤–µ—â–∞–µ—Ç—Å—è —Å {people}*']))
            elif len(words) > 0:
                if users['users'][str(message.author.id)]['oldmsg'] != msg:
                    intent = botic(msg)
                    if intent == 'evil': #–¥–æ–±–∞–≤–∏—Ç—å –∑–ª–æ—Å—Ç—å
                        users['users'][str(message.author.id)]['angry'] += 1
                        users['users'][str(message.author.id)]['angmsg'] = msg
                    elif intent == 'sorry': #—É–±–∞–≤–∏—Ç—å –∑–ª–æ—Å—Ç—å
                        if users['users'][str(message.author.id)]['angry'] > 0: 
                            users['users'][str(message.author.id)]['angry'] -= 1
                        elif users['users'][str(message.author.id)]['angry'] == 1: 
                            users['users'][str(message.author.id)]['angmsg'] = '—è –Ω–∞ —Ç–µ–±—è –Ω–µ –∑–ª—é—Å—å'
                    else:
                        angmsg = users['users'][str(message.author.id)]['angmsg'] 
                    if users['users'][str(message.author.id)]['angry'] > 3: #–∑–ª—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                        angmsg = users['users'][str(message.author.id)]['angmsg'] 
                        answer = random.choice(BOT_CONFIG['intents'][intent]['rancor'])
                        await message.channel.send(edit(answer, humanauthor, human, msg, people, angmsg))
                    elif state['bingpup']['sad'] == 1: #–≥—Ä—É—Å—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                        answer = random.choice(BOT_CONFIG['intents'][intent]['sadness'])
                        angmsg = users['users'][str(message.author.id)]['angmsg'] 
                        await message.channel.send(edit(answer, humanauthor, human, msg, people, angmsg))
                    else: #–æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                        answer = random.choice(BOT_CONFIG['intents'][intent]['responses'])
                        if BOT_CONFIG['intents'][intent]['double'] == 'embed':
                            embed = discord.Embed(description=edit(answer, humanauthor, human, msg, people, angmsg), color=0xff0000, title=BOT_CONFIG['intents'][intent]['title'])
                            embed.set_image(url=random.choice(BOT_CONFIG['intents'][intent]['responses2']))
                            if intent == 'remember':
                                await equate_var(users,str(message.author.id),'remember',msg.replace('–Ω–∞–ø–æ–º–Ω–∏ ',''))
                            await message.channel.send(embed=embed)
                        else:
                            sendmessage = await message.channel.send(edit(answer, humanauthor, human, msg, people, ""))     
                            if BOT_CONFIG['intents'][intent]['double'] == ('reactions' or 'reactions&responses2'): #—Ä–µ–∞–∫—Ü–∏—è
                                await message.add_reaction(random.choice(BOT_CONFIG['intents'][intent]['reactions']))
                            elif BOT_CONFIG['intents'][intent]['double'] == ('responses2' or 'reactions&responses2'): #–≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                answer = random.choice(BOT_CONFIG['intents'][intent]['responses2'])
                                await message.channel.send(edit(answer, humanauthor, human, msg, people, angmsg))
                            elif BOT_CONFIG['intents'][intent]['double'] != ('none' or 'change'): #—É–±–∞–≤–∏—Ç—å –≥—Ä—É—Å—Ç—å
                                await add_state(BOT_CONFIG['intents'][intent]['double'])
                            if BOT_CONFIG['intents'][intent]['time'] > 0: #–≤—Ä–µ–º—è
                                answer = random.choice(BOT_CONFIG['intents'][intent]['responses2'])
                                await asyncio.sleep(BOT_CONFIG['intents'][intent]['time'])
                                if BOT_CONFIG['intents'][intent]['double'] == 'change':
                                    await sendmessage.edit(content=edit(answer, humanauthor, human, msg, people, angmsg))
                                else:
                                    await message.channel.send(answer)
                else:
                    await message.channel.send(random.choice(BOT_CONFIG['intents']['repead']['rancor' if users['users'][str(message.author.id)]['angry'] > 3 else 'sadness' if state['bingpup']['sad'] == 1 else 'responses']))
            else: 
                await message.channel.send(random.choice(BOT_CONFIG['intents']['gav']['rancor' if users['users'][str(message.author.id)]['angry'] > 3 else 'sadness' if state['bingpup']['sad'] == 1 else 'responses'])) 
            await message.channel.send(random.choice(BOT_CONFIG['intents']['bingpup']['rancor' if users['users'][str(message.author.id)]['angry'] > 3 else 'sadness' if state['bingpup']['sad'] == 1 else 'responses']))
            await add_var(users,str(message.author.id),'exp',1)
            await equate_var(users,str(message.author.id),'oldmsg',msg)

    

    with open('state.json', 'w') as f4:
        json.dump(state,f4, indent=4)
    with open('lvl.json', 'w') as f:
        json.dump(users,f, indent=4)
    await bot.process_commands(message)

bot.run(os.getenv('BOT_TOKEN'))